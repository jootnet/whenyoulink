<html window-frame="extended"
      window-resizable="false"
      window-maximizable="false"
      window-width="210px"
      window-height="297px"
	  window-icon="whenyoulink.ico">
  <head>
    <meta charset="utf-8">
    <style>
      html {
          margin: 0px;
          padding: 0px;
      }
      body {
          width: 1*;
          height: 1*;
          margin: 0px;
          padding: 0px;
      }
      icon {
          margin-top: 14px;
          display: inline-block;
          size: 11px;
          background-size: contain;
          background-repeat: no-repeat;
          fill: #363636;
          stroke: none;
      }
      icon.minimize {
          margin-top: 18px;
          background-image: url(path:M44.521739 472.731826h934.956522v93.495652H44.521739z);
      }
      icon.close {
          fill: #363636;
          background-image: url(path:M582.95652219 508.95304344l367.3043475 364.71652219-67.82608688 64.36173843-367.30434844-364.71652125L141.56521719 950.26086969 73.73913031 879.59652219l373.89913032-376.86260906-367.72173844-364.63304344L147.82608687 73.73913031l367.30434751 364.75826063L882.43478281 73.73913031 950.26086969 144.19478281z);
      }
      icon.close.hover {
          fill: #fff;
      }
      .titleBar {
          height: 38px;
          line-height: 38px;
          background: #eee;
          display: flex;
          font-size: 13px;
          color: #333;
          flow: horizontal;
      }
      .caption {
          width: 1*;
          padding-left:8px;
      }
      .captionTool {
          width: 92px;
          text-align: center;
          flow: horizontal;
      }
      .captionTool div {
          width: 1*;
          height: 38px;
          line-height: 38px;
      }
      .captionTool div:hover {
          background: #ccc;
      	cursor: pointer;
      }
      .captionTool div:last-child:hover {
          background: rgb(231, 37, 54);
      }
	  .tiId {
		font-size: 13px;
		color: #9A9A9A;
		margin-top: 28px;
		margin-left: 12px;
	  }
	  .idLbl {
		font-size: 20px;
		color: #333333;
		position: absolute;
		left: 12px;
		top: 92px;
	  }
	  #idEditBtn {
	    background: url(pencil-square.svg) no-repeat;
	    fill: #9A9A9A;
        size: 18px;
        background-size: 14px;
        background-repeat: no-repeat;
		background-position: left top;
		cursor: pointer;
		display: inline-block;
	  }
	  #idTxt {
		font-size: 20px;
		color: #333333;
		position: absolute;
		left: 12px;
		top: 86px;
		border: 1px solid #0078D7;
		width: 160px;
		visibility: hidden;
	  }
	  .tiPsw {
		font-size: 13px;
		color: #9A9A9A;
		margin-top: 48px;
		margin-left: 12px;
	  }
	  .pswLbl {
		font-size: 13px;
		color: #333333;
		position: absolute;
		left: 12px;
		top: 152px;
	  }
	  #pswEditBtn {
	    background: url(pencil-square.svg) no-repeat;
	    fill: #9A9A9A;
        size: 12px;
        background-size: contain;
        background-repeat: no-repeat;
		cursor: pointer;
		display: inline-block;
	  }
	  #pswTxt {
		font-size: 13px;
		color: #333333;
		position: absolute;
		left: 12px;
		top: 150px;
		border: 1px solid #0078D7;
		width: 100px;
		visibility: hidden;
	  }
	  #tiNotice {
	    font-size: 12px;
		color: #9A9A9A;
	    margin-top: 48px;
		margin-left: 12px;
		line-height: 18px;
	  }
	  .statusBar {
	  	position: absolute;
		bottom: 0;
		height: 36px;
		background: #FAFAFA;
		width: 100%;
		padding-left: 12px;
		color: #6A6A6A;
		font-size: 13px;
		line-height: 36px;
	  }
	  #stausIcon {
		border-radius: 50%;
	    fill: #9A9A9A;
        size: 12px;
		display: inline-block;
	  }
	  #stausIcon.faild {
	    background: red;
	  }
	  #stausIcon.success {
	    background: green;
	  }
    </style>
  </head>
  <body>
    <div.titleBar>
      <div.caption role="window-caption">温油轻远程</div>
      <div.captionTool>
        <div#minimizeBtn>
          <icon.minimize></icon>
        </div>
        <div#closeBtn>
          <icon.close></icon>
        </div>
      </div>
    </div>
	<div.tiId>为远程连接设置识别码</div>
	<div.idLbl>
	  <label></label>
	  <i#idEditBtn tooltip="识别码最长11位，仅支持大小写字母和数字组合"></i>
	</div>
	<input#idTxt></input>
	<div.tiPsw>验证码</div>
	<div.pswLbl>
	  <label></label>
	  <i#pswEditBtn tooltip="验证码最长8位，仅支持大小写字母和数字组合"></i>
	</div>
	<input#pswTxt></input>
	<p#tiNotice>(永)不收费无广告，不设注册、会员<br>完整开源，参见<a href="https://www.cnblogs.com/johness/category/2239671.html" target="@system">温油轻远程</a>系列文章<br>请各路高手手下留情</p>
	<div.statusBar><i#stausIcon.faild></i> <label#statusLbl>未能与服务器建立连接</label></div>
    <script|module>
	  import { $, on, uuid, encode, decode } from "@sciter";
	  import * as sys from "@sys";

	  const window = Window.this
	  const statusLbl = $('#statusLbl')
	  const stausIcon = $('#stausIcon')
	  
	  globalThis.sessions = {}
	  window.on('sdp', function(evt) {
		  console.log(evt.data)
		globalThis.websocket.send(evt.data)
	  })
	  window.on('candidate', function(evt) {
		  console.log(evt.data)
		globalThis.websocket.send(evt.data)
	  })
	  window.on('remote_string', function(evt) {
		const msg = JSON.parse(evt.data)
		if (!!globalThis.sessions[msg.peer_id])
		{
		  globalThis.sessions[msg.peer_id].win.postEvent(new Event('dcMsgReceived', {data: msg.data}))
		}
	  })
	  globalThis.wsonopen = function() {
		globalThis.websocket.send(JSON.stringify({'me_id':globalThis.meId}))
	  }
	  globalThis.wsonmessage = function(evt) {
		console.log(evt.data)
		const message = JSON.parse(evt.data)
		if (Object.prototype.hasOwnProperty.call(message, 'peer_id')) {
			if (Object.prototype.hasOwnProperty.call(message, 'type')) {
				if (message.type === 'invite') {
					if (Object.prototype.hasOwnProperty.call(message, 'psw') && message.psw === globalThis.psw) {
						if (!!!globalThis.sessions[message.peer_id]) {
							const webrtcClient = WebrtcFactory.newMaster(message.peer_id)
							globalThis.sessions[message.peer_id] = {win: new Window({url: 'link.htm', parameters: {peerId: message.peer_id,
								webrtc: webrtcClient}}), rtc: webrtcClient, candidates: new Array, sdpSet: false}
						}
					} else {
						let sendMsg = {peer_id: message.peer_id, type: 'invite_resp', code: -1}
						globalThis.websocket.send(JSON.stringify(sendMsg))
					}
				} else if (message.type === 'sdp') {
					if (Object.prototype.hasOwnProperty.call(message, 'sdp')) {
						if (!!globalThis.sessions[message.peer_id]) {
							const ses = globalThis.sessions[message.peer_id]
							ses.rtc.setRemoteSDP(message.sdp)
							ses.candidates.forEach((item) => {
								ses.rtc.addRemoteCandidate(item.mid, item.mline_idx, item.sdp)
							})
							ses.candidates = new Array
							ses.sdpSet = true
						}
					}
				} else if (message.type === 'candidate') {
					if (!!globalThis.sessions[message.peer_id]) {
						const ses = globalThis.sessions[message.peer_id]
						if (ses.sdpSet) {
							ses.rtc.addRemoteCandidate(message.mid, message.mline_idx, message.sdp)
						} else {
							ses.candidates.push({mid: message.mid, mline_idx: message.mline_idx, sdp: message.sdp})
						}
					}
				}
			}
		} else if (message.code == 0) {
			statusLbl.innerText = '成功与服务器建立连接'
			stausIcon.classList.remove('faild')
			stausIcon.classList.add('success')
		} else {
			statusLbl.innerText = '未能与服务器建立连接'
			stausIcon.classList.add('faild')
			stausIcon.classList.remove('success')
			if (message.code == -1)
			{
				statusLbl.innerText = '识别码重复，将在15秒后重试'
			}
		}
	  }

	  globalThis.websocket = new WebSocket('ws://8.130.41.127/wrd/room')
	  globalThis.websocket.onopen = globalThis.wsonopen
	  globalThis.websocket.onmessage = globalThis.wsonmessage

	  setInterval(() => {
		// 每15s检测一次websocket连接
		if (globalThis.websocket.readyState != 1) {
			globalThis.websocket.close()
			globalThis.websocket = new WebSocket('ws://8.130.41.127/wrd/room')
			globalThis.websocket.onopen = globalThis.wsonopen
			globalThis.websocket.onmessage = globalThis.wsonmessage
		}
	  }, 15000)

	  const closeBtn = $('#closeBtn')
	  const minimizeBtn = $('#minimizeBtn')

	  closeBtn.on('mouseenter', () => {
          closeBtn.firstElementChild.classList.add("hover")
      })
	  closeBtn.on('mouseleave', () => {
          closeBtn.firstElementChild.classList.remove("hover")
      })
	  on('click', '#closeBtn', () => {
          if (window.modal({url: 'closing.htm', type: Window.DIALOG_WINDOW})) {
			  window.close(true)
          }
      })

	  on('click', '#minimizeBtn', () => {
		Graphics.Image.load('whenyoulink.ico').then((img) => {
			window.state = Window.WINDOW_HIDDEN
			window.trayIcon({image:img, text:'温油轻远程'})
		})
      })

      window.on('trayiconclick', (evt) => {
        if (evt.detail.buttons == 1) {
          window.trayIcon("remove")
          window.state = Window.WINDOW_SHOWN
        }
      })
	  
	  
	  const idLbl = $('.idLbl')
	  const idEditBtn = $('#idEditBtn')
	  const idTxt = $('#idTxt')
	  globalThis.setId = function(id) {
		if (id == globalThis.meId) {
			return
		}
		globalThis.meId = id
		idTxt.value = globalThis.meId
		let showId = ''
		let reverseId = ''
		for (let i = id.length - 1, spIdx = 1; i >= 0; --i, ++spIdx) {
		  reverseId += id.charAt(i)
		  if (spIdx % 3 == 0) {
			  reverseId += ' '
		  }
		}
		for (let i = reverseId.length - 1; i >= 0; --i) {
		  showId += reverseId.charAt(i)
		}
		idLbl.firstElementChild.innerText = showId.trim()
		if (globalThis.websocket.readyState == 1) {
		  globalThis.websocket.send(JSON.stringify({'me_id':globalThis.meId}))
		}
	  }

	  on('click', '#idEditBtn', () => {
		idTxt.style['visibility'] = 'visible'
		idLbl.style['visibility'] = 'hidden'
		idTxt.focus()
	  })

	  idTxt.on('blur', () => {
		if (idTxt.value.trim()) {
		  const newId = idTxt.value.trim()
		  const re = /^[A-z0-9]{1,11}$/;
		  if (!re.test(newId)) {
			  return
		  }
		  globalThis.setId(newId)
		  idTxt.style['visibility'] = 'hidden'
		  idLbl.style['visibility'] = 'visible'
		}
	  })

	  const pswLbl = $('.pswLbl')
	  const pswEditBtn = $('#pswEditBtn')
	  const pswTxt = $('#pswTxt')
	  globalThis.setPsw = function(psw) {
		if (psw == globalThis.psw) {
			return
		}
		globalThis.psw = psw
		pswLbl.firstElementChild.innerText = psw
		pswTxt.value = globalThis.psw
	  }

	  on('click', '#pswEditBtn', () => {
		pswTxt.style['visibility'] = 'visible'
		pswLbl.style['visibility'] = 'hidden'
		pswTxt.focus()
	  })

	  pswTxt.on('blur', () => {
		if (pswTxt.value.trim()) {
		  const newPsw = pswTxt.value.trim()
		  const re = /^[A-z0-9]{1,8}$/;
		  if (!re.test(newPsw)) {
			  return
		  }
		  globalThis.setPsw(newPsw)
		  pswTxt.style['visibility'] = 'hidden'
		  pswLbl.style['visibility'] = 'visible'
		}
	  })

	  const confDir = sys.homedir() + '/.whenyoulink'
	  const confFile = sys.homedir() + '/.whenyoulink/config.json'
	  document.on("ready", () => {
		let conf = null

		const dirStat = sys.fs.statSync(confDir)
		if (dirStat == null) {
		  sys.fs.mkdirSync(confDir)
		}
		const fileStat = sys.fs.statSync(confFile)
		if (fileStat != null) {
		  const text = decode(sys.fs.readFileSync(confFile), "utf-8")
		  const reId = /^[A-z0-9]{1,11}$/
		  const rePsw = /^[A-z0-9]{1,8}$/
		  try {
		    conf = JSON.parse(text)
		  } catch(err) {}
		  if (conf == null) {
		    sys.fs.unlink(confFile)
		  } else if (!Object.prototype.hasOwnProperty.call(conf, 'meId') || !Object.prototype.hasOwnProperty.call(conf, 'psw')) {
		    conf = null
		    sys.fs.unlink(confFile)
		  } else if (!reId.test(conf.meId) || !rePsw.test(conf.psw)) {
		    conf = null
		    sys.fs.unlink(confFile)
		  }
		}
		if (conf == null) {
		  const randomeId = uuid()
	      let realId = ''
		  for (let i = 0; i < randomeId.length; i += 3) {
		    realId += randomeId.charAt(i)
		  }
	      globalThis.setId(realId)

	      globalThis.setPsw(Math.round(Math.random() * 1e6)+'')

		  sys.fs.sync.open(confFile, 'w').writeSync(encode(JSON.stringify({'meId':globalThis.meId,'psw':globalThis.psw}), 'utf-8'))
		} else {
	      globalThis.setId(conf.meId)

	      globalThis.setPsw(conf.psw)
		}
	  })
	  document.on("beforeunload", () => {
		sys.fs.sync.open(confFile, 'w').writeSync(encode(JSON.stringify({'meId':globalThis.meId,'psw':globalThis.psw}), 'utf-8'))
	  })

	  window.on('childClose', (evt) => {
		  console.log(evt.data.peerId)
		globalThis.sessions[evt.data.peerId].rtc.close()
		globalThis.sessions[evt.data.peerId] = null
	  })
    </script>
  </body>
</html>
